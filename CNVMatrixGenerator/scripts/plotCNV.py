import pandas as pd
import numpy as np
import  os
import shutil
import warnings
import matplotlib
matplotlib.use('Agg')
import matplotlib.pyplot as plt
from matplotlib.backends.backend_pdf import PdfPages
import matplotlib.patches as mplpatches
import matplotlib.ticker as ticker
from matplotlib.ticker import LinearLocator
import matplotlib.lines as lines
import matplotlib.transforms as transforms
warnings.filterwarnings("ignore")

def plotCNV(matrix_path, output_path, project, plot_type="pdf", percentage=False, aggregate=False, read_from_file=True, write_to_file=True):
    """Outputs a pdf containing CNV signature plots
    :param matrix_path: path to matrix generated by CNVMatrixGenerator
    :param output_path: path to output pdf file containing plots
    :param project: name of project
    :param plot_type: output type of plot (default:pdf)
    :param percentage: True if y-axis is displayed as percentage of CNV events, False if displayed as counts (default:False)
    :param aggregate: True if output is a single pdf of counts aggregated across samples(e.g for a given cancer type, y-axis will be counts per sample), False if output is a multi-page pdf of counts for each sample
    >>> plotCNV()
    """
    # inner function to construct plot
    def plot(counts, labels, sample, project, percentage, aggregate=False, write_to_file=False):

        counts_ordered = list()
        labels_ordered = list()
        labels_updated = list()

        # index order will be: homdel, LOH, then het
        for i in range(0, len(labels)):
            labels_ordered.append(str(counts[i]) + ":" + labels[i])
        labels_ordered = pd.Series(labels_ordered)
        l2 = pd.Series(sorted(labels_ordered.values, key = lambda x: x.split(":", 3)[2]))
        lab_homdel=l2[l2.str.contains(":homdel:")]
        lab_homdel.index = [homdel for homdel in range(0, len(lab_homdel))]
        lab_LOH=l2[l2.str.contains(":LOH:")]
        lab_LOH.index = [loh for loh in range(len(lab_homdel), len(lab_homdel)+len(lab_LOH))]
        lab_het=l2[l2.str.contains(":het:")]
        lab_het.index = [het for het in range(len(lab_homdel)+len(lab_LOH), len(lab_homdel)+len(lab_LOH)+len(lab_het))]
        labels_ordered = lab_homdel.append(lab_LOH.append(lab_het))
        for i in labels_ordered:
                tmp_count=i.split(":", 1)
                counts_ordered.append(float(tmp_count[0]))
                labels_updated.append(tmp_count[1])

        labels = pd.Series(labels_updated)
        counts = counts_ordered

        super_class = ['Het', 'LOH', "Hom del"]
        hom_del_class = ['0 - 100kb', '100kb - 1Mb', '>1Mb']
        loh_subclass = ["1", '2', '3-4', '5-8', '9+']
        het_sub_class = ['2', '3-4', '5-8', '9+']
        x_labels = ['0 - 100kb', '100kb - 1Mb', '1Mb - 10Mb', '10Mb - 40Mb','>40Mb']
        #color_mapping = {'9+':[236/256,199/256,197/256], '5-8':[162/256,207/256,99/256], '3-4':[203/256,202/256,202/256], '2':[228/256,41/256,38/256], '1':[1/256,1/256,1/256], 'homdel':[3/256,189/256,239/256
        color_mapping = {'0:0-100kb':'#F0F8FF', '0:100kb-1Mb':'#787CE6', '0:>1Mb':'#0000CD', \
            '1:0-100kb':'#EBEBEB', '1:100kb-1Mb':'#C5C5C5', '1:1Mb-10Mb':'#9F9F9F', '1:10Mb-40Mb':'#797979', \
            '1:>40Mb':'#545454', '2:0-100kb':'#F5FFFA', '2:100kb-1Mb':'#C0E2C3', \
            '2:1Mb-10Mb':'#8BC48E', '2:10Mb-40Mb':'#56A858', '2:>40Mb':'#228B22', \
            '3-4:0-100kb':'#FFF0F5', '3-4:100kb-1Mb':'#DEBDEB', '3-4:1Mb-10Mb':'#BE8BE1', \
            '3-4:10Mb-40Mb':'#9D58D7', '3-4:>40Mb':'#7D26CD', '5-8:0-100kb':'#FFFAF0', \
            '5-8:100kb-1Mb':'#F2DCB3', '5-8:1Mb-10Mb':'#E6BF78', '5-8:10Mb-40Mb':'#D9A23C', \
            '5-8:>40Mb':'#CD8500', '9+:0-100kb':'#FFE4E1', '9+:100kb-1Mb':'#E2ADBC', \
            '9+:1Mb-10Mb':'#C47798', '9+:10Mb-40Mb':'#A84074', '9+:>40Mb':'#8B0A50'}
        colors = ['#0000CD', '#545454', '#228B22', '#7D26CD','#CD8500', '#8B0A50']

        N=48
        ticks = np.arange(N)
        width = 0.27
        xticks = []
        i = -1 #used to distinguish first bar from the rest

        # create the subplot
        fig, ax = plt.subplots(figsize=(16,10))
        # Create the plot layout (axis and grid lines)
        plt.gca().yaxis.grid(True)
        plt.gca().grid(which='major', axis='y', color=[0.93,0.93,0.93], zorder=1)
        plt.rcParams['axes.linewidth'] = 1
        ax.yaxis.set_major_locator(ticker.LinearLocator(5))
        ax.spines["bottom"].set_color("black")
        ax.spines["top"].set_color("black")
        ax.spines["right"].set_color("black")
        ax.spines["left"].set_color("black")
        # Add light gray horizontal lines at y-ticks
        ax.grid(linestyle='-', linewidth=1, color='#EDEDED', axis='y')
        plt.xlim(xmin=-.5,xmax=len(labels)-.5)
        tmp_max=max(counts)
        # give buffer of space for title at top left of plot
        plt.ylim(ymax=1.25*tmp_max)

        for count, label in zip(counts, labels):
            tmp=label.split(":", 2)[1]
            categories = label.split(':')
            cnv_class = categories[0]
            size_class = categories[2]
            #hom del has different color scheme and size classification
            hom_del = False
            if categories[1] == "homdel":
                hom_del = True
            i += 1 #position of bar

            ax.bar(ticks[i], count, color=color_mapping[cnv_class+":"+size_class], edgecolor='black', align='center')

            xticks.append(ticks[i])

        #ADD PATCHES AND TEXT
        patch_height = 0.05
        patch_width = 2.8
        loh_width= 2.5
        loh_len = 4.85

        # add vertical black lines
        ax.axvline(x=2.5, color='black', linewidth=1)
        ax.axvline(x=patch_width+loh_len*5.09, color='black', linewidth=1)

        categories = het_sub_class + loh_subclass + ['Hom' + '\n' + 'Del']
        trans = transforms.blended_transform_factory(ax.transData, ax.transAxes)

        patch_locs = np.arange(0, 45, 5) #position of patches in data coordinates
        line_locs = [] # for recording positions of top evel patches and separation lines

        # homdel patch
        ax.add_patch(plt.Rectangle((-.5, 1.065), 2.925, patch_height, clip_on=False, facecolor='#a9a9a9', transform=trans))
        ax.add_patch(plt.Rectangle((-.5, 1.01), 2.925, patch_height, clip_on=False, facecolor=colors[0], transform=trans))
        plt.text(.65, 1.02, "0", fontsize=23, fontname='Arial', fontweight='bold', color='white', transform=trans)
        plt.text(.15, 1.075, "HD", fontsize=23, fontname='Arial', fontweight='bold', color='white', transform=trans)

        # LOH Patches
        ax.add_patch(plt.Rectangle((2.575, 1.065), 24.825, patch_height, clip_on=False, facecolor='#a9a9a9', transform=trans))
        plt.text(patch_width + loh_len*2.25, 1.075, "LOH", fontsize=23, fontname='Arial', fontweight='bold', color='white', transform=trans)
        ax.add_patch(plt.Rectangle((2.575, 1.01), loh_len-.025, patch_height, clip_on=False, facecolor=colors[1], transform=trans))
        plt.text(4.725, 1.02, "1", fontsize=23, fontname='Arial', fontweight='bold', color='white', transform=trans)
        ax.add_patch(plt.Rectangle((7.55, 1.01), loh_len, patch_height, clip_on=False, facecolor=colors[2], transform=trans))
        plt.text(9.725, 1.02, "2", fontsize=23, fontname='Arial', fontweight='bold', color='white', transform=trans)
        ax.add_patch(plt.Rectangle((12.55, 1.01), loh_len, patch_height, clip_on=False, facecolor=colors[3], transform=trans))
        plt.text(14, 1.02, "3-4", fontsize=23, fontname='Arial', fontweight='bold', color='white', transform=trans)
        ax.add_patch(plt.Rectangle((17.55, 1.01), loh_len, patch_height, clip_on=False, facecolor=colors[4], transform=trans))
        plt.text(19.025, 1.02, "5-8", fontsize=23, fontname='Arial', fontweight='bold', color='white', transform=trans)
        ax.add_patch(plt.Rectangle((22.55, 1.01), loh_len, patch_height, clip_on=False, facecolor=colors[5], transform=trans))
        plt.text(24.375, 1.02, "9+", fontsize=23, fontname='Arial', fontweight='bold', color='white', transform=trans)

        # Heterozygous patches
        ax.add_patch(plt.Rectangle((27.55, 1.065), loh_len*4.0938, patch_height, clip_on=False, facecolor='#a9a9a9', transform=trans))
        plt.text(33.25, 1.075, "Heterozygous", fontsize=23, fontname='Arial', fontweight='bold', color='white', transform=trans)
        ax.add_patch(plt.Rectangle((27.55, 1.01), loh_len, patch_height, clip_on=False, facecolor=colors[2], transform=trans))
        plt.text(29.75, 1.02, "2", fontsize=23, fontname='Arial', fontweight='bold', color='white', transform=trans)
        ax.add_patch(plt.Rectangle((32.55, 1.01), loh_len, patch_height, clip_on=False, facecolor=colors[3], transform=trans))
        plt.text(34.25, 1.02, "3-4", fontsize=23, fontname='Arial', fontweight='bold', color='white', transform=trans)
        ax.add_patch(plt.Rectangle((37.55, 1.01), loh_len, patch_height, clip_on=False, facecolor=colors[4], transform=trans))
        plt.text(39.175, 1.02, "5-8", fontsize=23, fontname='Arial', fontweight='bold', color='white', transform=trans)
        ax.add_patch(plt.Rectangle((42.55, 1.01), loh_len, patch_height, clip_on=False, facecolor=colors[5], transform=trans))
        plt.text(44.525, 1.02, "9+", fontsize=23, fontname='Arial', fontweight='bold', color='white', transform=trans)

        # This is the x-axis
        ax.set_xticks(xticks)
        ax.set_xticklabels(hom_del_class + x_labels * 9, rotation=90, weight="bold", fontsize = 16, fontname='Arial', color='black')
        ax.tick_params(labelleft=True, left=False, bottom=False)
        ax.tick_params(axis='y', which='major', pad=0, labelsize=60)

        # format the y-axis labels
        if percentage:
            tmp_y_labels =['{0:0.1f}%'.format(round(x,1)) for x in ax.get_yticks().tolist()]
        else:
            tmp_y_labels =[round(x,1) for x in ax.get_yticks().tolist()]

        # set the y-axis labels
        ax.set_yticklabels(tmp_y_labels, fontname='Arial', weight='bold', fontsize=16, color='black')

        # y-axis title
        if aggregate and not percentage:
            ax.set_ylabel("Number of Events Per Sample", fontsize=24, fontname="Arial", weight = 'bold', labelpad = 15, color='black')
        elif not aggregate and percentage:
            ax.set_ylabel("Percentage of Copy Number Segments", fontsize=24, fontname="Arial", weight = 'bold', labelpad = 15, color='black')
        elif not aggregate and not percentage:
            ax.set_ylabel("Number of Events", fontsize=24, fontname="Arial", weight = 'bold', labelpad = 15, color='black')
        elif aggregate and percentage:
            ax.set_ylabel("Percentage of Copy Number Segments", fontsize=24, fontname="Arial", weight = 'bold', labelpad = 15, color='black')


        # Add the sample name
        plt.text(3, 0.90, sample, fontsize=20, fontname='Arial', fontweight='bold', color='black', transform=trans)

        if write_to_file:
            pp.savefig(fig, dpi=600, bbox_inches='tight')
        else:
            buffer = io.BytesIO()
            plt.savefig(buffer, format="png", bbox_inches='tight', dpi=600)
            plt.close()
            return buffer

    plt.style.use('ggplot')
    plt.rcParams['axes.facecolor'] = 'white'

    df = pd.DataFrame()
    if read_from_file:
        df = pd.read_csv(matrix_path, sep=None, engine='python') #flexible reading of tsv or csv
    else:
        df = matrix_path

    label = df.columns[0]
    labels = df[label]
    buff_list = dict()
    if aggregate:
        num_samples = len(df.columns) - 1
        df['total_count'] = df.sum(axis=1) / num_samples #NORMALIZE BY # of SAMPLES
        counts = list(df['total_count'])
        if percentage and sum(counts)!=0:
            counts = [(x/sum(counts))*100 for x in counts]
        sample = ''
        if write_to_file:
            pp = PdfPages(output_path + project + '_CNV48_counts_aggregated' + '.pdf')
        buff_list=plot(counts, labels, sample, project, percentage, aggregate=True, write_to_file=write_to_file)
    else:
        file_name=""
        if plot_type == 'pdf' and percentage:
            file_name=output_path + project + '_CNV48_signatures' + '.pdf'
        elif plot_type == 'pdf' and percentage==False:
            file_name= output_path + project + '_CNV48_counts' + '.pdf'
        else:
            print("The only plot type supported at this time is pdf")

        if write_to_file:
            pp=PdfPages(file_name)

        #each column vector in dataframe contains counts for a specific sample
        samples = list(df)[1:]
        for i, (col, sample) in enumerate(zip(df.columns[1:], samples)):
            counts = list(df[col])
            if percentage and sum(counts)!=0:
                counts = [(x/sum(counts))*100 for x in counts]
            assert(len(counts) == 48)
            assert(len(labels) == 48)
            if write_to_file:
                plot(counts, labels, sample, project, percentage, aggregate=False)
            else:
                buffer = plot(counts, labels, sample, project, percentage, aggregate=False, write_to_file=write_to_file)
                buff_list[sample]=buffer

    if write_to_file:
        pp.close()
    else:
        return buff_list
        pp.close()
